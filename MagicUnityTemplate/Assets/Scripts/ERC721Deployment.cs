using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.Contracts;
using Nethereum.RPC.Eth;
using System.Collections;
using System.Collections.Generic;
using Nethereum.Web3;
using Nethereum.Contracts.CQS;
using Nethereum.Util;
using Nethereum.Web3.Accounts;
using Nethereum.Hex.HexConvertors.Extensions;
using Nethereum.Contracts.Extensions;
using Nethereum.RPC;
using Nethereum.RPC.Eth.DTOs;
using Nethereum.RPC.Eth.Transactions;
using Nethereum.RPC.Personal;
using Nethereum.Contracts.ContractHandlers;
using Nethereum.Contracts.DeploymentHandlers;
using Nethereum.RPC.Web3;
using System.Numerics;
using UnityEngine;
using link.magic.unity.sdk;
using TMPro;
using System.Diagnostics;
using Sample.Ethereum.ERC721PresetMinterPauserAutoId.ContractDefinition;
using Sample.Ethereum.ERC721PresetMinterPauserAutoId;

public class ERC721Deployment : MonoBehaviour
{
    public TMP_InputField contractAddressOutput;

    public class StandardTokenDeployment : ContractDeploymentMessage
    {

        public static string BYTECODE = "0x60806040526040518060400160405280600c81526020017f48656c6c6f20576f726c642100000000000000000000000000000000000000008152506000908161004891906102ab565b5034801561005557600080fd5b5061037d565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806100dc57607f821691505b6020821081036100ef576100ee610095565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026101577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261011a565b610161868361011a565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006101a86101a361019e84610179565b610183565b610179565b9050919050565b6000819050919050565b6101c28361018d565b6101d66101ce826101af565b848454610127565b825550505050565b600090565b6101eb6101de565b6101f68184846101b9565b505050565b5b8181101561021a5761020f6000826101e3565b6001810190506101fc565b5050565b601f82111561025f57610230816100f5565b6102398461010a565b81016020851015610248578190505b61025c6102548561010a565b8301826101fb565b50505b505050565b600082821c905092915050565b600061028260001984600802610264565b1980831691505092915050565b600061029b8383610271565b9150826002028217905092915050565b6102b48261005b565b67ffffffffffffffff8111156102cd576102cc610066565b5b6102d782546100c4565b6102e282828561021e565b600060209050601f8311600181146103155760008415610303578287015190505b61030d858261028f565b865550610375565b601f198416610323866100f5565b60005b8281101561034b57848901518255600182019150602085019450602081019050610326565b868310156103685784890151610364601f891682610271565b8355505b6001600288020188555050505b505050505050565b61022d8061038c6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063cfae321714610030575b600080fd5b61003861004e565b6040516100459190610175565b60405180910390f35b6000805461005b906101c6565b80601f0160208091040260200160405190810160405280929190818152602001828054610087906101c6565b80156100d45780601f106100a9576101008083540402835291602001916100d4565b820191906000526020600020905b8154815290600101906020018083116100b757829003601f168201915b505050505081565b600081519050919050565b600082825260208201905092915050565b60005b838110156101165780820151818401526020810190506100fb565b83811115610125576000848401525b50505050565b6000601f19601f8301169050919050565b6000610147826100dc565b61015181856100e7565b93506101618185602086016100f8565b61016a8161012b565b840191505092915050565b6000602082019050818103600083015261018f818461013c565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806101de57607f821691505b6020821081036101f1576101f0610197565b5b5091905056fea264697066735822122026c3cca9524a03ee433eaba2971155090ae428ef2e80f192529c189b1bd5c1e664736f6c634300080f0033";

        public StandardTokenDeployment() : base(BYTECODE) { }

        [Parameter("uint256", "totalSupply")]
        public BigInteger TotalSupply { get; set; }
    }

    [Function("balanceOf", "uint256")]
    public class BalanceOfFunction : FunctionMessage
    {
        [Parameter("address", "_owner", 1)]
        public string Owner { get; set; }
    }

    public void DeployERC721NonAsync()
    {
        StartCoroutine(DeployERC721Routine());
    }

    public IEnumerator DeployERC721Routine()
    {
        var web3 = new Web3(Magic.Instance.Provider);
        web3.Eth.TransactionManager.UseLegacyAsDefault = true;
        var creatureDeployment = new ERC721PresetMinterPauserAutoIdDeployment();
        creatureDeployment.Name = "Test_name";
        creatureDeployment.Symbol = "Test_symbol";
        creatureDeployment.BaseTokenURI = "Test_token_URI";
        var creatureService = ERC721PresetMinterPauserAutoIdService.DeployContractAndWaitForReceiptAsync(web3, creatureDeployment);
        yield return creatureService;
        var transactionReceipt = creatureService.Result;
        var contractAddress = transactionReceipt.ContractAddress;
        contractAddressOutput.text = contractAddress;
    }

    public async void DeployERC721()
    {
        AndroidJNI.AttachCurrentThread();
        var web3 = new Web3(Magic.Instance.Provider);
        web3.Eth.TransactionManager.UseLegacyAsDefault = true;
        var deploymentMessage = new StandardTokenDeployment()
        {
            TotalSupply = 1000
        };
        var deploymentHandler = web3.Eth.GetContractDeploymentHandler<StandardTokenDeployment>();
        var transactionReceipt = await deploymentHandler.SendRequestAndWaitForReceiptAsync(deploymentMessage);
        var contractAddress = transactionReceipt.ContractAddress;
        contractAddressOutput.text = contractAddress;
    }
}
